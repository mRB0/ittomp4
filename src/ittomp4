#!/usr/bin/env python
# -*- coding: utf-8-unix -*-

from __future__ import division

import sys
import logging
import contextlib
import math
import struct

import cairo
import decode_mod

from sys import platform as _platform
if _platform == 'linux' or _platform == 'linux2':
    import cairofont_freetype as cairofont
elif _platform == 'win32':
    import cairofont_windows as cairofont
elif _platform == 'darwin':
    import cairofont_osx as cairofont

FONT_FACE = cairofont.load_font('Comic Sans MS')


@contextlib.contextmanager
def cairo_surface(*image_surface_args):
    surface = cairo.ImageSurface(*image_surface_args)
    yield surface
    del surface

@contextlib.contextmanager
def cairo_context(surface):
    context = cairo.Context(surface)
    yield context
    del context
    
class VideoSource(object):
    def __init__(self):
        pass

    def frames(self):
        barwidth = 100
        step = 10

        for i in xrange(0, 11 * 60):
            logging.debug("Produce a video frame")

            with cairo_surface(cairo.FORMAT_ARGB32, 1920, 1080) as surface:
                with cairo_context(surface) as ctx:
            
                    ctx.new_path()
                    ctx.rectangle(0, 0, 1920, 1080)
                    ctx.set_source_rgb(math.cos(i / 240 * (math.pi * 2)) / 2 + 0.5, 0, math.sin(i / 180 * (math.pi * 2)) / 2 + 0.5)
                    ctx.fill()

                    horizbar_y_ctr = (1080 / 2) + (int(math.cos(i / 240 * (math.pi * 2)) * (1080 / 2 * .8)))
                    max_extent = int(1080 * .08 / 2)

                    for h in xrange(max_extent, 0, -1):
                        ctx.new_path()
                        ctx.rectangle(0, horizbar_y_ctr - h, 1920, h * 2)
                        ctx.set_source_rgba(1, 1, 1, (max_extent - h) / pow(max_extent, 2))
                        ctx.fill()



                    ctx.new_path()

                    if 1920 - ((i * step) % 1920) < barwidth:
                        ctx.rectangle((i * step) % 1920 - 1920, 0, barwidth, 1080)
                    ctx.rectangle((i * step) % 1920, 0, barwidth, 1080)

                    ctx.set_source_rgb(0.25, 1, 0.25)
                    ctx.fill()


                    ctx.set_font_face(FONT_FACE)
                    ctx.set_font_size(128)
                    ctx.set_source_rgb(1, 1, 1)

                    for pos, ltr in enumerate('  YOU ARE FULL OF BOMBS AND/OR KEYS'):
                        x = 1920 - i * step + (128 * pos)
                        y = (1080 / 2) - (1080 * 0.2 * math.sin((x + (i * step/4)) * math.pi / 1020))

                        ctx.move_to(x, y)
                        ctx.show_text(ltr)

                surface_data = str(surface.get_data())

            yield surface_data


    
class AudioSource(object):
    def __init__(self, mod_filename):
        self._filename = mod_filename

    def frames(self):
        logging.info("Start decoding audio")

        with contextlib.closing(decode_mod.Module(self._filename)) as mod:

            while True:
                logging.debug("Produce some audio")

                samples_buffer_raw = mod.decode(4096)
                if samples_buffer_raw is None:
                    break
                samples_buffer = ''.join([struct.pack('<h', samp) for samp in samples_buffer_raw])

                yield samples_buffer

            logging.info("Done producing audio")

            
if __name__ == '__main__':
    import logging
    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)-7s %(message)s")

    import videofeeder

    audio_source = AudioSource(sys.argv[1])
    video_source = VideoSource()
    
    videofeeder.Manager(audio_source, video_source).run()

